CREATE DATABASE kr;

\c kr

DROP TABLE recipes_products;
DROP TABLE recipes;
DROP TABLE products;

CREATE TABLE recipes_products(
    PRIMARY KEY(id),
	id          BIGINT  GENERATED BY DEFAULT AS IDENTITY,     
	recipe_id   BIGINT,
	product_id  BIGINT,
    weight      INT
);

CREATE TABLE recipes(
    PRIMARY KEY(id),
	id          BIGINT  GENERATED BY DEFAULT AS IDENTITY,     
	name   varchar(255),
	image  varchar(255),
    calories      INT
);


CREATE TABLE products(
    PRIMARY KEY(id),
	id          BIGINT  GENERATED BY DEFAULT AS IDENTITY,     
	name        varchar(255),
	image       varchar(255),
    calories    INT,
    is_gmf      BOOLEAN,
    price       money
);


-- 2
ALTER TABLE recipes_products ADD CONSTRAINT fk_recipes_products_recipes FOREIGN KEY(recipe_id) REFERENCES recipes(id) ON DELETE RESTRICT ON UPDATE CASCADE;
ALTER TABLE recipes_products ADD CONSTRAINT fk_recipes_products_products FOREIGN KEY(product_id) REFERENCES products(id) ON DELETE RESTRICT ON UPDATE CASCADE;

-- 3

INSERT INTO products (name, image, calories, is_gmf, price) VALUES
	('product name', 'images/img1.png', 530, true, 400),
	('name', 'images/img43.png', 515, false, 300),
	('product', 'images/img12.png', 900, true, 600);


INSERT INTO recipes (name, image, calories) VALUES
    ('recipe name', 'imgs/photo.png', 60),
    ('recipe', 'imgs/photo1.png', 40),
    ('name', 'imgs/photo2.png', 70);

INSERT INTO recipes_products (recipe_id, product_id, weight) VALUES
    (1, 1, 4),
    (1, 2, 9),
    (1, 3, 1),
    (2, 2, 4),
    (2, 3, 2),
    (3, 1, 7);

-- 4

ALTER TABLE recipes ADD COLUMN weight INT;

-- 5
SELECT * 
FROM products
WHERE is_gmf IS TRUE; 

-- 6

SELECT * 
FROM products
ORDER BY price DESC
LIMIT 1;

-- 7

SELECT r.*, SUM(p.price * r_p.weight)  / 1000 as price
FROM recipes r
LEFT JOIN recipes_products r_p ON r_p.recipe_id = r.id
LEFT JOIN products p ON p.id = r_p.product_id
GROUP BY r.id;

-- 8

DROP FUNCTION  calculate_calories(id BIGINT);

CREATE OR REPLACE FUNCTION calculate_calories(id BIGINT)
RETURNS INT AS $$
<<main>>
DECLARE
    calories INT;
BEGIN
     SELECT (SUM(p.calories * r_p.weight) / 1000)
    INTO main.calories
    FROM recipes_products r_p
    LEFT JOIN products p ON p.id = r_p.product_id
    WHERE r_p.recipe_id = calculate_calories.id;

    RETURN  calories;
END;
$$LANGUAGE plpgsql;

SELECT calculate_calories(3);

-- 9
SELECT r.*
FROM recipes r
LEFT JOIN recipes_products r_p ON r.id = r_p.recipe_id
LEFT JOIN products p ON p.id = r_p.product_id
WHERE p.is_gmf IS TRUE
GROUP BY r.id
HAVING COUNT(p.id) >= 2;

-- 10

CREATE OR REPLACE FUNCTION calculate_weight(id BIGINT)
RETURNS INT AS $$
<<main>>
DECLARE
    total_weight INT;
BEGIN
    SELECT SUM(weight) 
    INTO total_weight
    FROM recipes_products 
    WHERE recipe_id = calculate_weight.id;

    RETURN total_weight;
END;
$$LANGUAGE plpgsql;

SELECT calculate_weight(1);


CREATE OR REPLACE FUNCTION change_recipe()
RETURNS TRIGGER AS $$
<<main>>
DECLARE
    recipe_id BIGINT;
    total_weight INT;
BEGIN
     IF NEW.recipe_id IS NOT NULL THEN
        recipe_id := NEW.recipe_id;
    ELSE
        recipe_id := OLD.recipe_id;
    END IF;

    total_weight:= calculate_weight(recipe_id);

    UPDATE recipes SET weight = total_weight WHERE recipes.id = main.recipe_id;
    
    RETURN null;
END;
$$LANGUAGE plpgsql;

CREATE TRIGGER change_recipe
        AFTER INSERT OR UPDATE OR DELETE ON recipes_products
        FOR EACH ROW
            EXECUTE FUNCTION change_recipe();

-- test
UPDATE recipes_products SET weight = weight + 1 WHERE recipe_id = 3;
INSERT INTO recipes_products (recipe_id, product_id, weight) VALUES (1, 1, 10);
DELETE FROM recipes_products where id = 7;
select * from recipes;
select * from recipes_products where recipe_id = 1;